//返回价格
var returnPrice = function(data) {
  //var v = data?parseFloat(data/100).toFixed(2) : '0.00';
  var pr = data ? parseFloat(data / 100).toString() : '0';
  var index = pr.indexOf(".");
  if (index > 0) {
    pr = pr.substring(0, index + 3);
  }
  return pr;
}

var returnPriceAbs = function(price) {
  return Math.abs(returnPrice(price));
}
//返回毛重
var returnGrossWeight = function(data) {
  /*var s = 0, e = 0;
  if(data.weight_s) s = data.weight_s / 10;
  if(data.weight_e) e = data.weight_e / 10;
  if(s > 0 && e > 0) return s + '-' + e + '斤';
  if(s > 0) return s + '斤';
  if(e > 0) return e + '斤';
  return '-';*/
  return data / 10;
}

//返回五舍五入
var returnToFixed = function(data, num) {
  return data.toFixed(num || 2);
}

//返回折扣
var returnDiscount = function(data){
  var d = data ? parseFloat(data / 10).toString() : '0';
  var index = d.indexOf(".");
  if (index > 0) {
    d = d.substring(0, index + 2);
  }
  return d;
}


/**
 * 返回加载更多or已加载所有
 */
var returnMore = function(num, query) {
  if (num) {
    if (num / query.page_size <= query.page) {
      return '已加载所有';
    } else {
      return '加载更多...';
    }
  } else {
    return '已加载所有';
  }
}

/*
  下单专用
*/
//返回使用余额价格（余额，是否用余额，订单价格）
var returnBalancePrice = function(balance, isBalance, orderPrice) {
  if (!isBalance) {
    return returnPrice(0);
  }
  if (balance >= orderPrice) {
    return returnPrice(orderPrice);
  }
  return returnPrice(balance);
}

//返回要支付的价格（余额，是否用余额，订单价格）
var returnPayPrice = function(balance, isBalance, orderPrice) {
  if (isBalance) {
    var b = balance >= orderPrice ? orderPrice : balance;
    return returnPrice(orderPrice - b);
  }
  return returnPrice(orderPrice);
}

//返回要支付类型(微信额度，余额额度)
var returnPayType = function(weixin, balance) {
  if (balance === 0) {
    return '微信';
  } else if (weixin === 0) {
    return '余额';
  } else {
    return '微信+余额';
  }
}
//返回是否显示支付选项(余额，金额，判断类型)
var returnShowPayType = function(balance, price, judgeType) {
  //余额
  if (judgeType === 'balance') {
    if (balance >= price) return true;
    return false;
  }
  //余额+微信
  else if (judgeType === 'balanceWeixin') {
    if (balance > 0 && balance < price) return true;
    return false;
  } else {
    return false;
  }
}

//日期格式化
/**
 * 
  yyyy：年
  MM：月
  dd：日
  hh：1~12小时制(1-12)
  HH：24小时制(0-23)
  mm：分
  ss：秒
  S：毫秒
  E：星期几
  D：一年中的第几天
  F：一月中的第几个星期(会把这个月总共过的天数除以7)
  w：一年中的第几个星期
  W：一月中的第几星期(会根据实际情况来算)
  a：上下午标识
  k：和HH差不多，表示一天24小时制(1-24)。
  K：和hh差不多，表示一天12小时制(0-11)。
  z：表示时区 
 */
var returnDateFormat = function(dateStr, format) {
  if (!dateStr) {
    return ''
  } else if (format === 'yyyy-MM-dd') {
    return dateStr.substring(0, 10);
  } else if (format === 'MM-dd') {
    return dateStr.substring(5, 10);
  } else if (format === 'HH:mm:ss') {
    return dateStr.substring(11, 19);
  } else if (format === 'HH:mm') {
    return dateStr.substring(11, 16);
  } else {
    return dateStr;
  }
}

var returnTimeFormat = function(timeStr, format) {
  if (!timeStr) {
    return '';
  } else if (format === 'HH:mm') {
    return timeStr.substring(0, 5);
  } else {
    return timeStr;
  }
}

//返回库存提示
var returnItemStock = function(item) {
  if (item.item_stock < item.min_num_per_order || item.item_stock === 0) {
    return '库存不足';
  } else if (item.item_stock > 0 && item.item_stock <= 10) {
    return '仅剩' + item.item_stock + '件';
  }
  return '';
}

//判断库存是否够数
var judgeItemStock = function(item){
  if(item.min_num_per_order > 0){
    if(item.item_stock < item.min_num_per_order){
      return false;
    }
    return true;
  }
  if(item.item_stock > 0){
    return true;
  }
  return false;
}

// 省略文本
var returnOmissionText = function (text, maxLength) {
  text = text ? text.toString() : '';
  maxLength = maxLength || 5;
  return text.length >= maxLength ? text.slice(0, maxLength) + '...' : text;
}
//截取运营专区前两个标签
var returnTags = function(tags){
  if(tags && tags.length > 2){
    tags.length = 2
  }
  return tags
}

// 会员等级类
var returnVIPLevelClassName = function(vipLevel) {
  console.log('------------')
  console.log(vipLevel)
  if(!vipLevel) {
    return '';
  }
  var className = ''
  
  switch (vipLevel) {
    case 1: 
      className = 'copper';
      break;
    case 2:
      className = 'silver';
      break;
    case 3:
      className = 'gold';
      break;
    default: 
      className = 'diamond';
      break;
  }
  return className;
}

// 返回指定个数的字符串
var returnSpecStr = function(str, start, end) {
  if(!str) {
    return ''
  }
  if(str.length <= (end-start)) {
    return str;
  }
  return str.substring(start, end);
}

// 返回优惠券适用范围
var returnCouponScopeText = function(scopeType, usableScopeList = [], unusableScopeList = []) {
  var str = '';
  switch (scopeType) {
    case 'all': 
      str = '全场可用'
      break;
    case 'operation':
      str = '限自营商品可用'
      break
     case 'merchant':
       str= '限平台商品可用'
       break
    case 'goods':
    case 'category':
      var a = usableScopeList.length > 0 ? '仅限' + usableScopeList.join('、') + '可用' : '';
      var b = unusableScopeList.length > 0 ? '' + unusableScopeList.join('、') + '不可用': '';
      str = a + b;
      break;
  }
  return str;
}

// 返回赠品列表字符串
var returnGiftInfoText = function(gift_info = []) {
  var str =''
  gift_info.forEach(function(item){
    str += item.title + '*' + item.gift_num + ' '
  })
  return str;
}

// 返回优惠券类型
var returnCouponTypeText = function(coupon_type, discount_type) {
  var str = ''
  if(coupon_type == 'delivery') {
    str = '运费券';
    return str;
  }
  if(coupon_type == 'goods') {
    switch(discount_type) {
      case 'reduce':
        str = '满减券'
        break;
      case 'discount':
        str = '满折券'
        break;
      case 'gift':
        str = '赠品券'
        break;
      default:
        str = '优惠券'
    }
    return str;
  }
}

// 返回优惠券明细 名称
var returnCouponDetailName = function(item) {
  // return returnCouponTypeText(coupon_type);
  // 原型图：发放条件 + 获【优惠券类型（使用限制）】 + 【发放张数】
  // ui图 ： 发放条件 + 获【优惠券类型】
  var condition = item.condition
  var condition_thr = item.condition_thr || 0
  var condition_items = item.condition_items || []
  var coupon_type = item.coupon_type
  var benefit = item.benefit
  var threshold = item.threshold
  var discount_type = item.discount_type
  var use_type = item.use_type
  var gift_info = item.gift_info

  var str = ''
  // 发放条件
  switch (condition) {
    case 'order':
     str = '单笔订单金额满' + returnPrice(condition_thr) + '元'
     break;
    case 'register':
      str = '新用户注册'
      break;
    case 'goods_num':
      str = '商品数量(' +  condition_items.join(',') + ')满' + condition_thr + '件'
      break;
    case 'delivery_fee':
      str = '运费金额满' + returnPrice(condition_thr) + '元'
      break;
    case 'goods':
      str = '商品总金额满' + returnPrice(condition_thr) + '元'
      break;
    case 'goods_operation':
      str = '商品总金额(自营商品)满' + returnPrice(condition_thr) + '元'
      break;
    case 'goods_merchant':
      str = '商品总金额(优选商品)满' + returnPrice(condition_thr) + '元'
      break;
    case 'goods_custom':
      //指定商品
      str = '商品总金额(' + condition_items.join(',') + ')满' + returnPrice(condition_thr) + '元'
      break;
    default: 
      break;
  }

  var tempFaceValue = 0; //优惠券面额
  var couponName = '';
  switch(coupon_type) {
    case 'delivery':
      str = str + ', 获'
      couponName = '的运费券1张'
      tempFaceValue = '减' + returnPrice(benefit) + '元';
    break;
    case 'goods':
      str = str + ', 获'
      couponName = '的商品券1张'
      if(discount_type == 'reduce') {
        tempFaceValue = '减' + returnPrice(benefit) + '元'
      } else if(discount_type == 'discount'){
        tempFaceValue = returnDiscount(benefit) + '折'
      } else if(discount_type == 'gift') {
        tempFaceValue = '赠' + '(' + returnGiftInfoText(gift_info) + ')' //补充赠品新鲜
      } else {
        tempFaceValue = ''
      }
  }

  switch(use_type) {
    case 'any':
      str = str + '全场无门槛' + tempFaceValue + couponName
      break;
    case 'amount':
      str = str + '满' + returnPrice(threshold)+ '元' + tempFaceValue + couponName
      break;
    case 'num':
      str = str + '购买数量满' + threshold + '件' + tempFaceValue + couponName
      break;
    case 'delivery_fee':
      str = str + '运费满' + returnPrice(threshold) + '元' + tempFaceValue + couponName
      break;
    default:
      break;
  }

  return str;

}

module.exports = {
  returnPrice: returnPrice,
  returnPriceAbs: returnPriceAbs,
  returnGrossWeight: returnGrossWeight,
  returnToFixed: returnToFixed,
  returnMore: returnMore,
  returnBalancePrice: returnBalancePrice,
  returnPayPrice: returnPayPrice,
  returnPayType: returnPayType,
  returnDateFormat: returnDateFormat,
  returnTimeFormat: returnTimeFormat,
  returnItemStock: returnItemStock,
  judgeItemStock: judgeItemStock,
  returnShowPayType: returnShowPayType,
  returnDiscount: returnDiscount,
  returnOmissionText: returnOmissionText,
  returnTags:returnTags,
  returnSpecStr: returnSpecStr,
  returnVIPLevelClassName: returnVIPLevelClassName,
  returnCouponScopeText: returnCouponScopeText,
  returnGiftInfoText: returnGiftInfoText,
  returnCouponDetailName: returnCouponDetailName,
  returnCouponTypeText: returnCouponTypeText
}